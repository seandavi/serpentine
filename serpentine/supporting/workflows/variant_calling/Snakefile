import itertools
import os
import collections
from snakemake.exceptions import MissingInputException
from serpentine.utils import list_rules

# Environment variable for serpentine base directory location
SERPENTINE_HOME="."

try:
    SERPENTINE_HOME=os.environ['SERPENTINE_HOME']
except KeyError:
    pass

def _get_rule_path(rule_file_path):
    "Combines the serpentine base directory with serpentine rule paths"
    return(os.path.join('../../',rule_file_path))

def _get_fastq_without_suffix():
    "To get the base fastq filenames"
    retval = [x.replace('.fq.gz','').replace('.fastq.gz','') for x in 
              itertools.chain.from_iterable(config['unit_fastq'].values())]
    return(retval)

configfile: "config.json"

for i in config['unit_fastq'].keys():
    config['unit_fastq'][i]=['/data/CCRBioinfo/fastq/'+x for x in 
                             config['unit_fastq'][i]]

config['aligner']='bwamem'

## dict for entity conversion
UNIT_TO_LIBRARY = {}
for lib,units in config['library_unit'].items():
    for unit in units:
        UNIT_TO_LIBRARY[unit]=lib

LIBRARY_TO_SAMPLE  = {}
for sample,libs in config['sample_library'].items():
    for lib in libs:
        LIBRARY_TO_SAMPLE[lib]=sample

UNIT_TO_SAMPLE = {}
for unit in config['unit_fastq'].keys():
    UNIT_TO_SAMPLE[unit]=LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]

SAMPLE_TO_UNIT = collections.defaultdict(list)
for unit,sample in UNIT_TO_SAMPLE.items():
    SAMPLE_TO_UNIT[sample].append(unit)

## bam files
BAMS = expand("RESULTS/{reference}.{aligner}/{sample}/{sample}.md.realigned.recal.bam",
              sample=config['sample_library'].keys(), 
              reference=config['reference'],
              aligner=config['aligners'])
BAIS = [BAM + ".bai" for BAM in BAMS]
BAMS_all = [(BAM + ' ' + BAM + ".tdf " + BAM + ".bai").split(' ') for BAM in BAMS]

## metrics
# DUPMETRICS = [BAM + ".dupmetrics" for BAM in BAMS]
METRICS_all = expand('{bam}.{metrics}',bam=BAMS,metrics=['alignment_summary_metrics',
                                                         'quality_distribution_metrics',
                                                         'quality_by_cycle_metrics',
                                                         'insert_size_metrics'])
FASTQC = expand("{unit}_fastqc.zip", unit = _get_fastq_without_suffix())
print(FASTQC)

## variants
VARIANTS = expand("RESULTS/{reference}.{aligner}/{sample}/{sample}.md.realigned.recal.{caller}.annotated.txt",
                  caller=config['germlineCallers'],
                  sample=config['sample_library'].keys(), 
                  reference=config['reference'],
                  aligner=config['aligners'])

## variant study
#VARIANTS_freebayesM = "STUDY/variant/" + config['reference'] + "." + config['aligner'] + "/freebayes_all.annotated.txt"
#VARIANTS_unifieldgenotyperM = "STUDY/variant/" + config['reference'] + "." + config['aligner'] + "/unifieldgenotyper_all.annotated.txt"


rule final:
    params: batch='-l nodes=1:gpfs'
    input: 
        BAMS \
        + METRICS_all \
        + VARIANTS \
        + FASTQC 
#        + VARIANTS_somatic
#        + ngCGH_nexus \
#        , VARIANTS_freebayesM
#        , VARIANTS_unifieldgenotyperM

localrules: final, index_bam


# aligners
include: _get_rule_path("rules/bwamem.rules")
include: _get_rule_path("rules/novo.rules")
include: _get_rule_path("rules/resources.rules")

# BAM processing
include: _get_rule_path("rules/post_mapping.rules")

# Alignment QC
include: _get_rule_path("rules/qc.rules")

# Variants and vcf
include: _get_rule_path("rules/variant_germline.rules")
include: _get_rule_path("rules/variant_somatic.rules")
include: _get_rule_path("rules/variant_multisample.rules")
include: _get_rule_path("rules/vcf_processing.rules")
include: _get_rule_path("rules/annotatevcf.rules")
include: _get_rule_path("rules/misc.rules")
















